{"version":3,"sources":["components/Signin.js","components/TwilioVideos.js","App.js","reportWebVitals.js","index.js"],"names":["Signin","setToken","name","roomName","setName","setRoomName","handlerSubmit","e","a","preventDefault","console","log","axios","post","identity","room","then","response","data","onSubmit","htmlFor","type","id","value","onChange","target","TwilioVideos","token","localVideoRef","useRef","remoteVideoRef","localVideoShareScreenRef","useState","screenTrackView","setScreenTrackView","isSharing","setIsSharing","setRoom","useEffect","TwilioVideo","connect","video","audio","createLocalVideoTrack","track","current","appendChild","attach","catch","error","addParticipant","participant","tracks","forEach","publication","isSubscribed","on","participants","shareScreen","navigator","mediaDevices","getDisplayMedia","Promise","reject","Error","height","width","stream","LocalVideoTrack","getVideoTracks","screenTrack","localParticipant","publishTrack","classList","add","className","ref","onClick","remove","stop","unpublishTrack","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf952bb7.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst Signin = ({ setToken, name, roomName, setName, setRoomName }) => {\n  const handlerSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log('Name:: ', name);\n    console.log('Room', roomName);\n\n    await axios.post('https://video-call-app-7909-dev.twil.io/video-token', {\n      identity: name,\n      room: roomName,\n    }).then( response => {\n      console.log('response: ', response.data)\n      setToken(response.data);\n    });\n    \n  };\n\n  return (\n    <form onSubmit={handlerSubmit}>\n      <label htmlFor='name'>\n        Nombre\n        <input type='text' id='name' value={name} onChange={(e) => setName(e.target.value)} />\n      </label>\n\n      <label htmlFor='room'>\n        Sala\n        <input type='text' id='room' value={roomName} onChange={(e) => setRoomName(e.target.value)} />\n      </label>\n\n      <br />\n      <button type='submit'>Ingresar a la Sala</button>\n    </form>\n  );\n};\n\nexport default Signin;\n","import { useEffect, useRef, useState } from 'react';\n\nimport TwilioVideo from 'twilio-video';\n\nimport './TwilioVideos.css';\n\nconst TwilioVideos = ({ token, roomName }) => {\n\n  \n  const localVideoRef = useRef();\n  const remoteVideoRef = useRef();\n  const localVideoShareScreenRef = useRef();\n\n  const [screenTrackView, setScreenTrackView] = useState(null);\n  const [isSharing, setIsSharing] = useState(false);\n  const [room, setRoom] = useState(false);\n\n  useEffect(() => {\n    TwilioVideo.connect(token, {\n      video: true,\n      audio: true,\n      name: roomName,\n    }).then((room) => {\n      setRoom(room);\n      // Attach the local video\n      TwilioVideo.createLocalVideoTrack()\n        .then((track) => {\n          localVideoRef.current.appendChild(track.attach());\n        })\n        .catch((error) => {\n          console.log('Error: ', error.response);\n        });\n\n      const addParticipant = (participant) => {\n        console.log('new participant!');\n        console.log(participant);\n\n        participant.tracks.forEach((publication) => {\n          if (publication.isSubscribed) {\n            const track = publication.track;\n\n            remoteVideoRef.current.appendChild(track.attach());\n            console.log('attached to remote video');\n          }\n        });\n\n        participant.on('trackSubscribed', (track) => {\n          console.log('track subscribed');\n          remoteVideoRef.current.appendChild(track.attach());\n        });\n      };\n\n      room.participants.forEach(addParticipant);\n      room.on('participantConnected', addParticipant);\n    });\n  }, [token, roomName]);\n\n  const shareScreen = async () => {\n    try {\n      if (typeof navigator === 'undefined' || !navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {\n        return Promise.reject(new Error('getDisplayMedia no soportado.'));\n      }\n\n      const screenTrack = await navigator.mediaDevices\n        .getDisplayMedia({\n          video: { height: 1080, width: 1920 },\n        })\n        .then(function (stream) {\n          return new TwilioVideo.LocalVideoTrack(stream.getVideoTracks()[0], { name: `${roomName}` });\n        });\n\n      localVideoShareScreenRef.current.appendChild(screenTrack.attach());\n\n      // Muestra una nueva pantalla\n      room.localParticipant.publishTrack(screenTrack);\n\n      localVideoRef.current.classList.add('ocultarPantalla');\n      localVideoShareScreenRef.current.classList.add('mostrarPantalla');\n\n      setScreenTrackView(screenTrack);\n      setIsSharing(true);\n    } catch (error) {\n      console.log('error::', error);\n      setIsSharing(false);\n    }\n  };\n\n  const stopShareScreen = () => {\n    localVideoRef.current.classList.remove('ocultarPantalla');\n    localVideoShareScreenRef.current.classList.remove('mostrarPantalla');\n\n    screenTrackView.stop();\n    room.localParticipant.unpublishTrack(screenTrackView);\n    setIsSharing(false);\n  };\n\n  return (\n    <div>\n      <h2>Room: {roomName}</h2>\n\n      <div className='localVideo' ref={localVideoRef}></div>\n      <div className='localVideoShare' ref={localVideoShareScreenRef}></div>\n      <div className='remoteVideo' ref={remoteVideoRef}></div>\n\n      {!isSharing ? <button onClick={shareScreen}>Share Screen</button> : <button onClick={stopShareScreen}>Stop Share Screen</button>}\n    </div>\n  );\n};\n\nexport default TwilioVideos;\n","import { useState } from 'react';\nimport Signin from './components/Signin';\n\nimport './App.css';\nimport TwilioVideos from './components/TwilioVideos';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [roomName, setRoomName] = useState('room');\n  const [token, setToken] = useState(null);\n\n  return (\n    <div className='App'>\n      {!token ? (\n        <Signin setToken={setToken} name={name} roomName={roomName} setName={setName} setRoomName={setRoomName} />\n      ) : (\n        <TwilioVideos room={roomName} token={token} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}