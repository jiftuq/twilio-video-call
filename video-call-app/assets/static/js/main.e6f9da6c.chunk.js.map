{"version":3,"sources":["components/Signin.js","components/TwilioVideos.js","App.js","reportWebVitals.js","index.js"],"names":["Signin","setToken","name","room","setName","setRoom","handlerSubmit","e","a","preventDefault","console","log","axios","post","identity","result","data","onSubmit","htmlFor","type","id","value","onChange","target","TwilioVideos","token","localVideoRef","useRef","remoteVideoRef","useEffect","TwilioVideo","connect","video","audio","then","createLocalVideoTrack","track","current","appendChild","attach","addParticipant","participant","tracks","forEach","publication","isSubscribed","on","participants","ref","App","useState","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA2CeA,EAxCA,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAGxCC,EAAa,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACpBD,EAAEE,iBAEFC,QAAQC,IAAI,SAAUT,GACtBQ,QAAQC,IAAI,OAAQR,GAJA,SAMCS,IAAMC,KAAK,sDAAuD,CACnFC,SAAUZ,EACVC,KAAMA,IARU,OAMdY,EANc,OAWpBL,QAAQC,IAAI,YAAaI,GAEzBd,EAASc,EAAOC,MAEhBN,QAAQC,IAAI,WAAYI,EAAOC,MAfX,2CAAH,sDAmBnB,OACE,uBAAMC,SAAUX,EAAhB,UACE,wBAAOY,QAAQ,OAAf,mBAEE,uBAAOC,KAAK,OAAOC,GAAG,OAAOC,MAAOnB,EAAMoB,SAAU,SAACf,GAAD,OAAOH,EAAQG,EAAEgB,OAAOF,aAG9E,wBAAOH,QAAQ,OAAf,iBAEE,uBAAOC,KAAK,OAAOC,GAAG,OAAOC,MAAOlB,EAAMmB,SAAU,SAACf,GAAD,OAAOF,EAAQE,EAAEgB,OAAOF,aAG9E,uBACA,wBAAQF,KAAK,SAAb,oC,0BC8BSK,EAhEM,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOtB,EAAW,EAAXA,KACvBuB,EAAgBC,mBAChBC,EAAiBD,mBAqDvB,OAnDAjB,QAAQC,IAAI,QAASc,GAoBrBI,qBAAU,WACRC,IAAYC,QAAQN,EAAO,CAAEO,OAAO,EAAMC,OAAO,EAAM/B,KAAMC,IAAQ+B,MAAK,SAAC/B,GAEzE2B,IAAYK,wBAAwBD,MAAK,SAACE,GACxCV,EAAcW,QAAQC,YAAYF,EAAMG,aAG1C,IAAMC,EAAiB,SAACC,GACtB/B,QAAQC,IAAI,oBACZD,QAAQC,IAAI8B,GAEZA,EAAYC,OAAOC,SAAQ,SAACC,GAC1B,GAAIA,EAAYC,aAAc,CAC5B,IAAMT,EAAQQ,EAAYR,MAE1BR,EAAeS,QAAQC,YAAYF,EAAMG,UACzC7B,QAAQC,IAAI,gCAIhB8B,EAAYK,GAAG,mBAAmB,SAACV,GACjC1B,QAAQC,IAAI,oBACZiB,EAAeS,QAAQC,YAAYF,EAAMG,cAI7CpC,EAAK4C,aAAaJ,QAAQH,GAC1BrC,EAAK2C,GAAG,uBAAwBN,QAEjC,CAACf,IAGF,gCACE,6DAA0BtB,KAC1B,qBAAK6C,IAAKtB,IACV,qBAAKsB,IAAKpB,QC7CDqB,MAZf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNhD,EADM,KACAE,EADA,OAEW8C,mBAAS,QAFpB,mBAEN/C,EAFM,KAEAE,EAFA,OAGa6C,mBAAS,IAHtB,mBAGNzB,EAHM,KAGCxB,EAHD,KAKb,OACE,qBAAKkD,UAAU,MAAf,SACI1B,EAAsG,cAAC,EAAD,CAActB,KAAMA,EAAMsB,MAAOA,IAA/H,cAAC,EAAD,CAAQxB,SAAUA,EAAUC,KAAMA,EAAMC,KAAMA,EAAMC,QAASA,EAASC,QAASA,OCDhF+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e6f9da6c.chunk.js","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nconst Signin = ({setToken, name, room, setName, setRoom }) => {\n\n\n  const handlerSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log('Nombre', name)\n    console.log('Sala', room)\n\n    const result = await axios.post('https://video-call-app-7909-dev.twil.io/video-token', {\n        identity: name,\n        room: room\n    });\n\n    console.log('result:: ', result)\n\n    setToken(result.data);\n\n    console.log('Token:: ', result.data)\n\n  }\n\n  return (\n    <form onSubmit={handlerSubmit}>\n      <label htmlFor='name'>\n        Nombre\n        <input type='text' id='name' value={name} onChange={(e) => setName(e.target.value)} />\n      </label>\n\n      <label htmlFor='room'>\n        Sala\n        <input type='text' id='room' value={room} onChange={(e) => setRoom(e.target.value)} />\n      </label>\n\n      <br />\n      <button type=\"submit\">Ingresar a la Sala</button>\n    </form>\n  );\n};\n\nexport default Signin;\n","import { useEffect, useRef } from 'react';\n\nimport TwilioVideo from 'twilio-video';\n\nconst TwilioVideos = ({ token, room }) => {\n  const localVideoRef = useRef();\n  const remoteVideoRef = useRef();\n\n  console.log('TOKEN', token);\n\n//   useEffect(() => {\n//     TwilioVideo.connect(token, {\n//       video: true,\n//       audio: true,\n//       name: room,\n//     })\n//       .then((room) => {\n//         console.log('Conectándose a Twilio:: ');\n//         TwilioVideo.createLocalVideoTrack().then((track) => {\n//           localVideoRef.current.appendChild(track.attach());\n//         });\n//       })\n//       .catch((error) => {\n//         console.log('Error: ', error.response);\n//       });\n//     return () => {};\n//   }, [token, room]);\n\n  useEffect(() => {\n    TwilioVideo.connect(token, { video: true, audio: true, name: room }).then((room) => {\n      // Attach the local video\n      TwilioVideo.createLocalVideoTrack().then((track) => {\n        localVideoRef.current.appendChild(track.attach());\n      });\n\n      const addParticipant = (participant) => {\n        console.log('new participant!');\n        console.log(participant);\n        \n        participant.tracks.forEach((publication) => {\n          if (publication.isSubscribed) {\n            const track = publication.track;\n\n            remoteVideoRef.current.appendChild(track.attach());\n            console.log('attached to remote video');\n          }\n        });\n\n        participant.on('trackSubscribed', (track) => {\n          console.log('track subscribed');\n          remoteVideoRef.current.appendChild(track.attach());\n        });\n      };\n\n      room.participants.forEach(addParticipant);\n      room.on('participantConnected', addParticipant);\n    });\n  }, [token]);\n\n  return (\n    <div>\n      <h2>Tú estás en la Sala: {room}</h2>\n      <div ref={localVideoRef}></div>\n      <div ref={remoteVideoRef}></div>\n    </div>\n  );\n};\n\nexport default TwilioVideos;\n","import { useState } from 'react';\nimport Signin from './components/Signin';\n\nimport './App.css';\nimport TwilioVideos from './components/TwilioVideos';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('room');\n  const [token, setToken] = useState('');\n\n  return (\n    <div className='App'>\n      {!token ? <Signin setToken={setToken} name={name} room={room} setName={setName} setRoom={setRoom}  /> : <TwilioVideos room={room} token={token} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}